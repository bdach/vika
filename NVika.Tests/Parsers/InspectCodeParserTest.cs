using NVika.Parsers;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml.Linq;
using Xunit;
using Xunit.Extensions;

namespace NVika.Tests.Parsers
{
    public class InspectCodeParserTest
    {
        public static IEnumerable<object[]> ParseXmlData
        {
            get
            {
                using (Stream resourceStream = Assembly.GetExecutingAssembly()
                                                   .GetManifestResourceStream("NVika.Tests.inspectcodereport.xml"))
                {
                    using (StreamReader resourceStreamReader = new StreamReader(resourceStream))
                    {
                        string xml = resourceStreamReader.ReadToEnd();
                        XDocument doc = XDocument.Parse(xml);
                        return new[] { new object[] { doc } };
                    }
                }
            }
        }

        [Fact]
        public void Name()
        {
            // arrange
            var parser = new InspectCodeParser();

            // act
            var name = parser.Name;

            // assert
            Assert.Equal("InspectCode", name);
        }

        [Theory]
        [InlineData("<!-- Generated by InspectCode 8.2.1000.4527 --><root></root>", true)]
        [InlineData("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!-- Generated by InspectCode 8.2.1000.4527 --><root></root>", true)]
        [InlineData("<Report ToolsVersion=\"8.2\"></Report>", false)]
        [InlineData("<IssueTypes></IssueTypes>", false)]
        public void CanParse(string xmlContent, bool expectedResult)
        {
            // arrange
            var doc = XDocument.Parse(xmlContent);
            var parser = new InspectCodeParser();

            // act
            var result = parser.CanParse(doc);

            // assert
            Assert.Equal(expectedResult, result);
        }

        [Theory]
        [MemberData("ParseXmlData")]
        public void Parse(XDocument report)
        {
            // arrange
            var parser = new InspectCodeParser();

            // act
            var result = parser.Parse(report);

            // assert
            Assert.Equal(53, result.Count());

            var issue = result.First();
            Assert.Equal("Constraints Violations", issue.Category);
            Assert.Equal("Inconsistent Naming", issue.Description);
            Assert.Equal(@"NVika\BuildServerCommand.cs", issue.FilePath);
            Assert.Null(issue.HelpUri);
            Assert.Equal(14u, issue.Line);
            Assert.Equal("Name 'reportPath' does not match rule 'Instance fields (private)'. Suggested name is '_reportPath'.", issue.Message);
            Assert.Equal("InconsistentNaming", issue.Name);
            Assert.Equal(319u, issue.Offset.Start);
            Assert.Equal(329u, issue.Offset.End);
            Assert.Equal("NVika", issue.Project);
            Assert.Equal(IssueSeverity.Warning, issue.Severity);
            Assert.Equal("InspectCode", issue.Source);

            issue = result.Skip(49).First();
            Assert.Equal("Redundancies in Symbol Declarations", issue.Category);
            Assert.Equal("Type or type member is never used: Non-private accessibility", issue.Description);
            Assert.Equal(@"NVika.Tests\Class1.cs", issue.FilePath);
            Assert.Null(issue.HelpUri);
            Assert.Equal(8u, issue.Line);
            Assert.Equal("Class 'Class1' is never used", issue.Message);
            Assert.Equal("UnusedMember.Global", issue.Name);
            Assert.Equal(135u, issue.Offset.Start);
            Assert.Equal(141u, issue.Offset.End);
            Assert.Equal("NVika.Tests", issue.Project);
            Assert.Equal(IssueSeverity.Suggestion, issue.Severity);
            Assert.Equal("InspectCode", issue.Source);

            issue = result.Skip(50).First();
            Assert.Equal("Redundancies in Code", issue.Category);
            Assert.Equal("Redundant using directive", issue.Description);
            Assert.Equal(@"NVika.Tests\Properties\AssemblyInfo.cs", issue.FilePath);
            Assert.Equal("http://confluence.jetbrains.net/display/ReSharper/Redundant+using+directive", issue.HelpUri.AbsoluteUri);
            Assert.Equal(2u, issue.Line);
            Assert.Equal("Using directive is not required by the code and can be safely removed", issue.Message);
            Assert.Equal("RedundantUsingDirective", issue.Name);
            Assert.Equal(26u, issue.Offset.Start);
            Assert.Equal(64u, issue.Offset.End);
            Assert.Equal("NVika.Tests", issue.Project);
            Assert.Equal(IssueSeverity.Warning, issue.Severity);
            Assert.Equal("InspectCode", issue.Source);

            issue = result.Skip(51).First();
            Assert.Equal("C# Compiler Errors", issue.Category);
            Assert.Equal("", issue.Description);
            Assert.Equal(@"NVika.Tests\Class1.cs", issue.FilePath);
            Assert.Null(issue.HelpUri);
            Assert.Equal(42u, issue.Line);
            Assert.Equal("Some compiler error", issue.Message);
            Assert.Equal("CSharpErrors", issue.Name);
            Assert.Null(issue.Offset);
            Assert.Equal("NVika.Tests", issue.Project);
            Assert.Equal(IssueSeverity.Error, issue.Severity);
            Assert.Equal("InspectCode", issue.Source);

            issue = result.Last();
            Assert.Equal("Common Practices and Code Improvements", issue.Category);
            Assert.Equal("Make constructor in abstract class protected", issue.Description);
            Assert.Equal(@"NVika\Parsers\Issue.cs", issue.FilePath);
            Assert.Equal("http://confluence.jetbrains.net/display/ReSharper/Make+constructor+in+abstract+class+protected", issue.HelpUri.AbsoluteUri);
            Assert.Equal(43u, issue.Line);
            Assert.Equal("Using directive is not required by the code and can be safely removed", issue.Message);
            Assert.Equal("PublicConstructorInAbstractClassHint", issue.Name);
            Assert.NotNull(issue.Offset);
            Assert.Null(issue.Offset.Start);
            Assert.Null(issue.Offset.End);
            Assert.Equal("NVika.Tests", issue.Project);
            Assert.Equal(IssueSeverity.Hint, issue.Severity);
            Assert.Equal("InspectCode", issue.Source);
        }
    }
}